module Testbench();

timeunit 10ns;	// Half clock cycle at 50 MHz
			// This is the amount of time represented by #1 
timeprecision 1ns;

// These signals are internal because the processor will be 
// instantiated as a submodule in testbench.
logic Clk = 0;
logic [15:0] A, B, Sum_RA, Sum_CL, Sum_CS, ans;
logic CO_RA, CO_CL, CO_CS;
logic [6:0] AhexL,
		 AhexU,
		 BhexL,
		 BhexU; 

// A counter to count the instances where simulation results
// do no match with expected results
integer ErrorCnt= 0;
		
// Instantiating the DUT
// Make sure the module and signal names match with those in your design
ripple_adder ripple_adder_inst
    (
        .A,             // This is shorthand for .A(A) when both wires/registers have the same name
        .B,
        .Sum(Sum_RA), // Connects the Sum_comb wire in this file to the Sum wire in ripple_adder.sv
        .CO(Co_RA)
	 );
carry_lookahead_adder carry_lookahead_inst
(
        .A,             // This is shorthand for .A(A) when both wires/registers have the same name
        .B,
        .Sum(Sum_CL), // Connects the Sum_comb wire in this file to the Sum wire in ripple_adder.sv
        .CO(Co_CL)
);
carry_select_adder carry_select_inst
(
        .A,             // This is shorthand for .A(A) when both wires/registers have the same name
        .B,
        .Sum(Sum_CS), // Connects the Sum_comb wire in this file to the Sum wire in ripple_adder.sv
        .CO(Co_CS)
);
// Toggle the clock
// #1 means wait for a delay of 1 timeunit
always begin : CLOCK_GENERATION
#1 Clk = ~Clk;
end

initial begin: CLOCK_INITIALIZATION
    Clk = 0;
end 


// Testing begins here
// The initial block is not synthesizable
// Everything happens sequentially inside an initial block
// as in a software program
initial begin: TEST_VECTORS

	A = 20;
	B = 30;

	#100 ans = A + B;
			
			
	$display("%d + %d = %d. Ripple Adder: %d. Carry Lookahead: %d. Carry Select: %d", A, B, ans, Sum_RA, Sum_CL, Sum_CS);

	A = -30;
	B = 30;

	#100 ans = A + B;
			
			
	$display("%d + %d = %d. Ripple Adder: %d. Carry Lookahead: %d. Carry Select: %d", A, B, ans, Sum_RA, Sum_CL, Sum_CS);

	A = -20000;
	B = -30000;

	#100 ans = A + B;
			
			
	$display("%d + %d = %d. Ripple Adder: %d. Carry Lookahead: %d. Carry Select: %d", A, B, ans, Sum_RA, Sum_CL, Sum_CS);

	/*
	if (ErrorCnt == 0)
		$display("Success!");  // Command line output in ModelSim
	else
		$display("%d error(s) detected. Try again!", ErrorCnt);
	*/
	end
	
endmodule
